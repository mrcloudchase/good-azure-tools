#!/bin/bash
###############################
####### SCRIPT DETAILS ########
# Name: AKS Cluster with Monitoring
# Purpose: Deploy Azure Kubernetes Service cluster with monitoring and security
# Category: containers
# Estimated Cost: $100-200/month (Standard tier)
# Deployment Time: 10-15 minutes
# Disclaimer: This script is intended for ACG Azure Cloud Sandbox environments
###############################

##############################
##### START - VARIABLES ######
##############################

# Get resource group and set to variable $rg
rg=$(az group list --query '[].name' -o tsv)

# Assign location variable to playground resource group location
location=$(az group list --query '[].location' -o tsv)

# AKS cluster configuration
aksClusterName="aks-cluster-$(shuf -i 1000-9999 -n 1)"
nodeCount=2
nodeSize="Standard_DS2_v2"
kubernetesVersion="1.28.3"

# Monitoring configuration
logAnalyticsWorkspace="aks-logs-workspace"

# Network configuration
vnetName="aks-vnet"
subnetName="aks-subnet"
vnetAddressPrefix="10.100.0.0/16"
subnetAddressPrefix="10.100.1.0/24"

##############################
##### END - VARIABLES ########
##############################

##############################
####### START - SCRIPT #######
##############################

echo "üöÄ Starting AKS cluster deployment..."

## INSTALL AKS EXTENSION
echo "üì¶ Installing AKS CLI extension..."
az extension add --name aks-preview --yes
echo "‚úÖ AKS extension installed!"

## CREATE LOG ANALYTICS WORKSPACE
echo "üìä Creating Log Analytics workspace for monitoring..."
az monitor log-analytics workspace create \
    --resource-group $rg \
    --workspace-name $logAnalyticsWorkspace \
    --location $location

# Get workspace ID for monitoring
workspaceId=$(az monitor log-analytics workspace show \
    --resource-group $rg \
    --workspace-name $logAnalyticsWorkspace \
    --query id -o tsv)

echo "‚úÖ Log Analytics workspace created!"

## CREATE VIRTUAL NETWORK
echo "üåê Creating virtual network for AKS..."
az network vnet create \
    --resource-group $rg \
    --name $vnetName \
    --location $location \
    --address-prefixes $vnetAddressPrefix \
    --subnet-name $subnetName \
    --subnet-prefix $subnetAddressPrefix

# Get subnet ID
subnetId=$(az network vnet subnet show \
    --resource-group $rg \
    --vnet-name $vnetName \
    --name $subnetName \
    --query id -o tsv)

echo "‚úÖ Virtual network created!"

## CREATE AKS CLUSTER
echo "‚öôÔ∏è Creating AKS cluster (this may take 10-15 minutes)..."
az aks create \
    --resource-group $rg \
    --name $aksClusterName \
    --location $location \
    --node-count $nodeCount \
    --node-vm-size $nodeSize \
    --kubernetes-version $kubernetesVersion \
    --vnet-subnet-id $subnetId \
    --enable-addons monitoring \
    --workspace-resource-id $workspaceId \
    --enable-managed-identity \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 5 \
    --network-plugin azure \
    --network-policy azure \
    --generate-ssh-keys \
    --no-wait

echo "üîÑ AKS cluster creation initiated..."

## WAIT FOR CLUSTER COMPLETION
echo "‚è≥ Waiting for cluster to be ready..."
az aks wait --resource-group $rg --name $aksClusterName --created --timeout 1200

echo "‚úÖ AKS cluster created successfully!"

## GET CREDENTIALS
echo "üîë Configuring kubectl credentials..."
az aks get-credentials --resource-group $rg --name $aksClusterName --overwrite-existing

echo "‚úÖ Kubectl configured!"

## INSTALL NGINX INGRESS CONTROLLER
echo "üåç Installing NGINX Ingress Controller..."
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update

helm install ingress-nginx ingress-nginx/ingress-nginx \
    --namespace ingress-nginx \
    --create-namespace \
    --set controller.service.type=LoadBalancer \
    --set controller.service.externalTrafficPolicy=Local

echo "‚úÖ NGINX Ingress Controller installed!"

## DEPLOY SAMPLE APPLICATION
echo "üì± Deploying sample application..."

# Create namespace
kubectl create namespace sample-app

# Deploy sample app
cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  namespace: sample-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
    spec:
      containers:
      - name: sample-app
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  name: sample-app-service
  namespace: sample-app
spec:
  selector:
    app: sample-app
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sample-app-ingress
  namespace: sample-app
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sample-app-service
            port:
              number: 80
EOF

echo "‚úÖ Sample application deployed!"

## CONFIGURE RBAC FOR DASHBOARD (OPTIONAL)
echo "üîê Configuring Kubernetes Dashboard access..."

# Create service account for dashboard
kubectl create serviceaccount dashboard-admin-sa -n kube-system

# Create cluster role binding
kubectl create clusterrolebinding dashboard-admin-sa \
    --clusterrole=cluster-admin \
    --serviceaccount=kube-system:dashboard-admin-sa

echo "‚úÖ Dashboard access configured!"

## GET CLUSTER INFORMATION
echo "üìã Gathering cluster information..."

# Get nodes
echo "Getting node information..."
kubectl get nodes -o wide

# Get cluster info
clusterFqdn=$(az aks show --resource-group $rg --name $aksClusterName --query fqdn -o tsv)
nodeResourceGroup=$(az aks show --resource-group $rg --name $aksClusterName --query nodeResourceGroup -o tsv)

# Get ingress IP (may take a few minutes to provision)
echo "‚è≥ Waiting for ingress controller to get external IP..."
sleep 60
ingressIp=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

## OUTPUT INFORMATION
echo ""
echo "üéâ AKS cluster deployment completed successfully!"
echo ""
echo "üìã Deployment Summary:"
echo "====================="
echo "Cluster Name: $aksClusterName"
echo "Cluster FQDN: $clusterFqdn"
echo "Node Count: $nodeCount"
echo "Node Size: $nodeSize"
echo "Kubernetes Version: $kubernetesVersion"
echo "Node Resource Group: $nodeResourceGroup"
echo ""
echo "üåç Network Information:"
echo "VNet: $vnetName ($vnetAddressPrefix)"
echo "Subnet: $subnetName ($subnetAddressPrefix)"
if [ ! -z "$ingressIp" ]; then
    echo "Ingress IP: $ingressIp"
    echo "Sample App URL: http://$ingressIp"
else
    echo "Ingress IP: Provisioning... (check in a few minutes)"
fi
echo ""
echo "üîß Management Commands:"
echo "========================"
echo "Get cluster credentials:"
echo "  az aks get-credentials --resource-group $rg --name $aksClusterName"
echo ""
echo "View cluster nodes:"
echo "  kubectl get nodes"
echo ""
echo "View sample application:"
echo "  kubectl get pods -n sample-app"
echo ""
echo "Access Kubernetes Dashboard:"
echo "  az aks browse --resource-group $rg --name $aksClusterName"
echo ""
echo "Get ingress controller external IP:"
echo "  kubectl get service ingress-nginx-controller -n ingress-nginx"
echo ""
echo "üîó Portal Links:"
echo "AKS Cluster: https://portal.azure.com/#resource/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$rg/providers/Microsoft.ContainerService/managedClusters/$aksClusterName"
echo "Log Analytics: https://portal.azure.com/#resource/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$rg/providers/Microsoft.OperationalInsights/workspaces/$logAnalyticsWorkspace"
echo ""
echo "‚ö†Ô∏è Important Notes:"
echo "- Cluster autoscaling is enabled (1-5 nodes)"
echo "- Azure CNI networking is configured"
echo "- Container monitoring is enabled"
echo "- NGINX Ingress Controller is installed"
echo "- Sample application is deployed in 'sample-app' namespace"
echo ""
echo "üåü Your AKS cluster is ready for development!"

##############################
######## END - SCRIPT ########
##############################